import os
import json
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = os.getenv('BOT_TOKEN') or os.getenv('TOKEN') or os.getenv('TELEGRAM_BOT_TOKEN')

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ ADMIN_ID1, ADMIN_ID2, etc.
ADMIN_IDS = []

# –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ADMIN_ID1, ADMIN_ID2, ADMIN_ID3, etc.
for i in range(1, 10):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ ADMIN_ID9
    admin_id = os.getenv(f'ADMIN_ID{i}')
    if admin_id and admin_id.isdigit():
        ADMIN_IDS.append(int(admin_id))

# –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
admin_ids_str = os.getenv('ADMIN_IDS') or os.getenv('ADMIN_ID') or os.getenv('ADMINS') or ''
if admin_ids_str:
    try:
        if ',' in admin_ids_str:
            additional_admins = [int(x.strip()) for x in admin_ids_str.split(',') if x.strip().isdigit()]
            ADMIN_IDS.extend(additional_admins)
        elif admin_ids_str.isdigit():
            ADMIN_IDS.append(int(admin_ids_str))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: {e}")

# –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
ADMIN_IDS = list(set(ADMIN_IDS))

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
CHANNEL_ID = os.getenv('CHANNEL_ID')

# –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
logger.info(f"BOT_TOKEN –Ω–∞–π–¥–µ–Ω: {'–î–∞' if BOT_TOKEN else '–ù–µ—Ç'}")
logger.info(f"ADMIN_IDS –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {ADMIN_IDS}")
logger.info(f"CHANNEL_ID: {CHANNEL_ID}")
logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤: {len(ADMIN_IDS)}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –∞–¥–º–∏–Ω–∞–º–∏
for i in range(1, 10):
    admin_var = os.getenv(f'ADMIN_ID{i}')
    if admin_var:
        logger.info(f"ADMIN_ID{i}: {admin_var}")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
WAITING_PLANT_NAME = 'waiting_plant_name'
WAITING_PLANT_DESCRIPTION = 'waiting_plant_description'
WAITING_PLANT_PRICE = 'waiting_plant_price'
WAITING_PLANT_QUANTITY = 'waiting_plant_quantity'
WAITING_PLANT_PHOTO = 'waiting_plant_photo'
WAITING_BOOKING_NAME = 'waiting_booking_name'
WAITING_BOOKING_PHONE = 'waiting_booking_phone'

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
temp_plant_data = {}
temp_booking_data = {}

def load_json_file(filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as file:
                return json.load(file)
        return {}
    except (json.JSONDecodeError, FileNotFoundError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return {}

def save_json_file(filename, data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        with open(filename, 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        return False

def load_plants():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    return load_json_file('plants.json')

def save_plants(plants):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    return save_json_file('plants.json', plants)

def load_bookings():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    return load_json_file('bookings.json')

def save_bookings(bookings):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    return save_json_file('bookings.json', bookings)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "–±–µ–∑_username"
    
    # –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞: {user_id} –≤ {ADMIN_IDS} = {user_id in ADMIN_IDS}")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states.pop(user_id, None)
    temp_plant_data.pop(user_id, None)
    temp_booking_data.pop(user_id, None)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    is_admin = user_id in ADMIN_IDS
    
    if is_admin:
        keyboard = [
            [KeyboardButton("üì± –ö–∞—Ç–∞–ª–æ–≥ —Ä–∞—Å—Ç–µ–Ω–∏–π")],
            [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ")],
            [KeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")],
            [KeyboardButton("üîß Debug Info")]
        ]
        logger.info(f"‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ê–î–ú–ò–ù–°–ö–£–Æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        keyboard = [
            [KeyboardButton("üì± –ö–∞—Ç–∞–ª–æ–≥ —Ä–∞—Å—Ç–µ–Ω–∏–π")],
            [KeyboardButton("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞")]
        ]
        logger.info(f"üë§ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    welcome_msg = "üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ü–≤–µ—Ç–æ–≤ Polly's Garden!\n\n"
    if is_admin:
        welcome_msg += f"üîë –í–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† (ID: {user_id})\n"
        welcome_msg += f"üë• –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(ADMIN_IDS)}\n"
        welcome_msg += f"üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {ADMIN_IDS}"
    else:
        welcome_msg += f"üë§ –í–∞—à ID: {user_id}\n"
        welcome_msg += f"üìã –ê–¥–º–∏–Ω—ã —Å–∏—Å—Ç–µ–º—ã: {ADMIN_IDS}\n"
        welcome_msg += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ."
    
    await update.message.reply_text(welcome_msg, reply_markup=reply_markup)

async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    plants = load_plants()
    
    if not plants:
        await update.message.reply_text("üå± –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –†–∞—Å—Ç–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    
    keyboard = []
    for plant_id, plant_data in plants.items():
        availability = "‚úÖ" if plant_data.get('quantity', 0) > 0 else "‚ùå"
        button_text = f"{availability} {plant_data['name']} - {plant_data['price']}‚ÇΩ"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"plant_{plant_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üå∏ –ö–∞—Ç–∞–ª–æ–≥ –Ω–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π:\n\n"
        "‚úÖ - –í –Ω–∞–ª–∏—á–∏–∏\n"
        "‚ùå - –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=reply_markup
    )

async def handle_plant_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    query = update.callback_query
    await query.answer()
    
    plant_id = query.data.split('_')[1]
    plants = load_plants()
    
    if plant_id not in plants:
        await query.edit_message_text("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    plant = plants[plant_id]
    
    message_text = f"üå∏ **{plant['name']}**\n\n"
    message_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {plant['description']}\n"
    message_text += f"üí∞ –¶–µ–Ω–∞: {plant['price']}‚ÇΩ\n"
    message_text += f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {plant['quantity']} —à—Ç.\n"
    
    keyboard = []
    if plant['quantity'] > 0:
        keyboard.append([InlineKeyboardButton("üõí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_{plant_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back_to_catalog")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if 'photo_file_id' in plant:
        try:
            await query.message.reply_photo(
                photo=plant['photo_file_id'],
                caption=message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            await query.delete_message()
        except:
            await query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    else:
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    plant_id = query.data.split('_')[1]
    plants = load_plants()
    
    if plant_id not in plants:
        await query.edit_message_text("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    plant = plants[plant_id]
    
    if plant['quantity'] <= 0:
        await query.edit_message_text("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!")
        return
    
    temp_booking_data[user_id] = {
        'plant_id': plant_id,
        'plant_name': plant['name'],
        'price': plant['price']
    }
    
    user_states[user_id] = WAITING_BOOKING_NAME
    
    await query.edit_message_text(
        f"üõí –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {plant['name']}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {plant['price']}‚ÇΩ\n\n"
        "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )

async def back_to_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–∞–ª–æ–≥—É"""
    query = update.callback_query
    await query.answer()
    
    plants = load_plants()
    
    if not plants:
        await query.edit_message_text("üå± –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –†–∞—Å—Ç–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    
    keyboard = []
    for plant_id, plant_data in plants.items():
        availability = "‚úÖ" if plant_data.get('quantity', 0) > 0 else "‚ùå"
        button_text = f"{availability} {plant_data['name']} - {plant_data['price']}‚ÇΩ"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"plant_{plant_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üå∏ –ö–∞—Ç–∞–ª–æ–≥ –Ω–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π:\n\n"
        "‚úÖ - –í –Ω–∞–ª–∏—á–∏–∏\n"
        "‚ùå - –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=reply_markup
    )

async def add_plant_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.\n–í–∞—à ID: {user_id}\n–ê–¥–º–∏–Ω—ã: {ADMIN_IDS}")
        return
    
    user_states[user_id] = WAITING_PLANT_NAME
    temp_plant_data[user_id] = {}
    
    await update.message.reply_text("üå± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:")

async def handle_plant_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if user_states.get(user_id) != WAITING_PLANT_NAME:
        return
    
    name = update.message.text.strip()
    if len(name) < 2:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    temp_plant_data[user_id]['name'] = name
    user_states[user_id] = WAITING_PLANT_DESCRIPTION
    
    await update.message.reply_text("üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:")

async def handle_plant_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if user_states.get(user_id) != WAITING_PLANT_DESCRIPTION:
        return
    
    description = update.message.text.strip()
    if len(description) < 5:
        await update.message.reply_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    temp_plant_data[user_id]['description'] = description
    user_states[user_id] = WAITING_PLANT_PRICE
    
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ä–∞—Å—Ç–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):")

async def handle_plant_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if user_states.get(user_id) != WAITING_PLANT_PRICE:
        return
    
    try:
        price = float(update.message.text.strip())
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.50):")
        return
    
    temp_plant_data[user_id]['price'] = price
    user_states[user_id] = WAITING_PLANT_QUANTITY
    
    await update.message.reply_text("üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ –Ω–∞–ª–∏—á–∏–∏:")

async def handle_plant_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    if user_states.get(user_id) != WAITING_PLANT_QUANTITY:
        return
    
    try:
        quantity = int(update.message.text.strip())
        if quantity < 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        return
    
    temp_plant_data[user_id]['quantity'] = quantity
    user_states[user_id] = WAITING_PLANT_PHOTO
    
    await update.message.reply_text("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ:")

async def handle_plant_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if user_states.get(user_id) != WAITING_PLANT_PHOTO:
        return
    
    plant_data = temp_plant_data[user_id]
    
    if update.message.photo:
        plant_data['photo_file_id'] = update.message.photo[-1].file_id
    elif update.message.text and update.message.text.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip']:
        pass
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
        return
    
    plants = load_plants()
    plant_id = str(len(plants) + 1)
    plants[plant_id] = plant_data
    
    if save_plants(plants):
        user_states.pop(user_id, None)
        temp_plant_data.pop(user_id, None)
        
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Ç–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"üå∏ –ù–∞–∑–≤–∞–Ω–∏–µ: {plant_data['name']}\n"
            f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {plant_data['description']}\n"
            f"üí∞ –¶–µ–Ω–∞: {plant_data['price']}‚ÇΩ\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {plant_data['quantity']} —à—Ç."
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_booking_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    user_id = update.effective_user.id
    
    if user_states.get(user_id) != WAITING_BOOKING_NAME:
        return
    
    name = update.message.text.strip()
    if len(name) < 2:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):")
        return
    
    temp_booking_data[user_id]['customer_name'] = name
    user_states[user_id] = WAITING_BOOKING_PHONE
    
    await update.message.reply_text("üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")

async def handle_booking_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if user_states.get(user_id) != WAITING_BOOKING_PHONE:
        return
    
    phone = update.message.text.strip()
    if len(phone) < 10:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return
    
    booking_data = temp_booking_data[user_id]
    booking_data.update({
        'customer_phone': phone,
        'user_id': user_id,
        'username': update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω",
        'booking_time': datetime.now().isoformat(),
        'status': 'pending'
    })
    
    bookings = load_bookings()
    booking_id = str(len(bookings) + 1)
    bookings[booking_id] = booking_data
    
    if save_bookings(bookings):
        plants = load_plants()
        plant_id = booking_data['plant_id']
        if plant_id in plants:
            plants[plant_id]['quantity'] -= 1
            save_plants(plants)
        
        user_states.pop(user_id, None)
        temp_booking_data.pop(user_id, None)
        
        await update.message.reply_text(
            f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            f"üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {booking_id}\n"
            f"üå∏ –†–∞—Å—Ç–µ–Ω–∏–µ: {booking_data['plant_name']}\n"
            f"üí∞ –¶–µ–Ω–∞: {booking_data['price']}‚ÇΩ\n\n"
            f"üìû –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø–æ –Ω–æ–º–µ—Ä—É: {phone}\n\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –∑–∞–∫–∞–∑ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üîî –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n"
                         f"üÜî –ó–∞–∫–∞–∑ #{booking_id}\n"
                         f"üë§ –ö–ª–∏–µ–Ω—Ç: {booking_data['customer_name']}\n"
                         f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {booking_data['customer_phone']}\n"
                         f"üå∏ –†–∞—Å—Ç–µ–Ω–∏–µ: {booking_data['plant_name']}\n"
                         f"üí∞ –¶–µ–Ω–∞: {booking_data['price']}‚ÇΩ"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def check_rights(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    admin_vars = {}
    for i in range(1, 10):
        admin_var = os.getenv(f'ADMIN_ID{i}')
        if admin_var:
            admin_vars[f'ADMIN_ID{i}'] = admin_var
    
    message = f"""
üîç **–ü–û–õ–ù–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø**

üë§ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ ID: `{user_id}`
‚Ä¢ Username: @{username}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üîë –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†' if user_id in ADMIN_IDS else 'üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}

üìä **–°–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω–æ–≤:**
‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤: {len(ADMIN_IDS)}
‚Ä¢ –°–ø–∏—Å–æ–∫: {ADMIN_IDS}

üîß **–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Railway:**
‚Ä¢ BOT_TOKEN: {'‚úÖ –ù–∞–π–¥–µ–Ω' if BOT_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
‚Ä¢ CHANNEL_ID: {CHANNEL_ID or '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

**–ù–∞–π–¥–µ–Ω–Ω—ã–µ ADMIN_ID –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:**
{chr(10).join([f'‚Ä¢ {k}: {v}' for k, v in admin_vars.items()]) if admin_vars else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ADMIN_ID*'}

üí° **–î–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –¥–æ–±–∞–≤—å—Ç–µ –≤ Railway:**
`ADMIN_ID1 = {user_id}`
"""
    
    await update.message.reply_text(message, parse_mode='Markdown')

async def debug_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await check_rights(update, context)
        return
    
    plants = load_plants()
    bookings = load_bookings()
    
    debug_text = f"""
üîß **–ê–î–ú–ò–ù–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨ –û–¢–õ–ê–î–ö–ò**

**üå∏ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –†–∞—Å—Ç–µ–Ω–∏–π: {len(plants)}
‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {len(bookings)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: {len(user_states)}

**üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –î–æ–±–∞–≤–ª—è—é—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è: {len(temp_plant_data)}
‚Ä¢ –ë—Ä–æ–Ω–∏—Ä—É—é—Ç: {len(temp_booking_data)}

**üìÅ –§–∞–π–ª—ã:**
‚Ä¢ plants.json: {'‚úÖ –ï—Å—Ç—å' if os.path.exists('plants.json') else '‚ùå –ù–µ—Ç'}
‚Ä¢ bookings.json: {'‚úÖ –ï—Å—Ç—å' if os.path.exists('bookings.json') else '‚ùå –ù–µ—Ç'}

**üîß Environment:**
‚Ä¢ –ê–¥–º–∏–Ω–æ–≤: {len(ADMIN_IDS)} - {ADMIN_IDS}
‚Ä¢ Channel: {CHANNEL_ID or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
"""
    
    await update.message.reply_text(debug_text, parse_mode='Markdown')

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = user_states.get(user_id)
    if state == WAITING_PLANT_NAME:
        await handle_plant_name(update, context)
        return
    elif state == WAITING_PLANT_DESCRIPTION:
        await handle_plant_description(update, context)
        return
    elif state == WAITING_PLANT_PRICE:
        await handle_plant_price(update, context)
        return
    elif state == WAITING_PLANT_QUANTITY:
        await handle_plant_quantity(update, context)
        return
    elif state == WAITING_PLANT_PHOTO:
        await handle_plant_photo(update, context)
        return
    elif state == WAITING_BOOKING_NAME:
        await handle_booking_name(update, context)
        return
    elif state == WAITING_BOOKING_PHONE:
        await handle_booking_phone(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    if text == "üì± –ö–∞—Ç–∞–ª–æ–≥ —Ä–∞—Å—Ç–µ–Ω–∏–π":
        await show_catalog(update, context)
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ":
        await add_plant_start(update, context)
    elif text == "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏":
        if user_id in ADMIN_IDS:
            bookings = load_bookings()
            if bookings:
                msg = "üìã **–ó–∞–∫–∞–∑—ã:**\n\n"
                for booking_id, booking in bookings.items():
                    status_emoji = "‚è≥" if booking.get('status') == 'pending' else "‚úÖ"
                    msg += f"{status_emoji} #{booking_id}: {booking['plant_name']} - {booking['customer_name']}\n"
                await update.message.reply_text(msg, parse_mode='Markdown')
            else:
                await update.message.reply_text("üìã –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ":
        if user_id in ADMIN_IDS:
            await update.message.reply_text("üîß –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
    elif text == "üîß Debug Info":
        await debug_info(update, context)
    elif text == "‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞":
        await check_rights(update, context)
    else:
        await update.message.reply_text("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start")

async def handle_photo_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ"""
    user_id = update.effective_user.id
    if user_states.get(user_id) == WAITING_PLANT_PHOTO:
        await handle_plant_photo(update, context)

async def handle_callback_queries(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    data = query.data
    
    if data.startswith("plant_"):
        await handle_plant_selection(update, context)
    elif data.startswith("book_"):
        await start_booking(update, context)
    elif data == "back_to_catalog":
        await back_to_catalog(update, context)
    else:
        await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway.")
        return
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å {len(ADMIN_IDS)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏: {ADMIN_IDS}")
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("debug", check_rights))
    application.add_handler(CallbackQueryHandler(handle_callback_queries))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo_messages))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
    
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

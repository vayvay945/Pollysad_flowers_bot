import logging
import json
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode, ChatType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [int(os.getenv("ADMIN_ID1", "0")), int(os.getenv("ADMIN_ID2", "0"))]
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "0"))

# –§–ê–ô–õ–´
PLANTS_FILE = "plants.json"
BOOKINGS_FILE = "bookings.json"

# –°–û–°–¢–û–Ø–ù–ò–Ø (–ø—Ä–æ—Å—Ç—ã–µ, –±–µ–∑ ConversationHandler)
user_states = {}

def load_plants():
    if os.path.exists(PLANTS_FILE):
        with open(PLANTS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_plants(plants):
    with open(PLANTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(plants, f, ensure_ascii=False, indent=2)

def load_bookings():
    if os.path.exists(BOOKINGS_FILE):
        with open(BOOKINGS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_bookings(bookings):
    with open(BOOKINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(bookings, f, ensure_ascii=False, indent=2)

def is_admin(user_id):
    return user_id in ADMIN_IDS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    chat_type = update.effective_chat.type
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id if update.effective_user else None
    
    logger.info(f"/start –æ—Ç {user_id} –≤ {chat_type} {chat_id}")
    
    if chat_type == ChatType.CHANNEL:
        logger.info(f"üî• ID –ö–ê–ù–ê–õ–ê: {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º deep link –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if chat_type == ChatType.PRIVATE and context.args:
        param = context.args[0]
        if param.startswith("book_"):
            plant_id = param.replace("book_", "")
            await start_booking(update, context, plant_id)
            return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
    await show_catalog(update, context)

async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    plants = load_plants()
    bookings = load_bookings()
    
    text = "üå± **–ö–ê–¢–ê–õ–û–ì –†–ê–°–¢–ï–ù–ò–ô**\n\n"
    keyboard = []
    
    if not plants:
        text += "üòî –†–∞—Å—Ç–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏."
    else:
        available = 0
        for plant_id, plant in plants.items():
            if plant_id not in bookings:  # –ù–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ
                keyboard.append([InlineKeyboardButton(
                    f"ü™¥ {plant['name']} - {plant['price']}", 
                    callback_data=f"plant_{plant_id}"
                )])
                available += 1
        
        if available == 0:
            text += "üîí –í—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å–µ–π—á–∞—Å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã."
        else:
            text += f"–î–æ—Å—Ç—É–ø–Ω–æ: **{available}** —Ä–∞—Å—Ç–µ–Ω–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:"
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if update.effective_user and is_admin(update.effective_user.id):
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="admin_add")])
        keyboard.append([InlineKeyboardButton("üìã –ë—Ä–æ–Ω–∏", callback_data="admin_bookings")])
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        except:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await update.callback_query.message.delete()
            except:
                pass
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

async def show_plant(update: Update, context: ContextTypes.DEFAULT_TYPE, plant_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    query = update.callback_query
    plants = load_plants()
    bookings = load_bookings()
    
    if plant_id not in plants:
        await query.edit_message_text("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    plant = plants[plant_id]
    is_booked = plant_id in bookings
    
    text = f"ü™¥ **{plant['name']}**\n\n"
    text += f"üí∞ –¶–µ–Ω–∞: **{plant['price']}**\n\n"
    text += f"üìù {plant['description']}\n\n"
    
    keyboard = []
    
    if is_booked:
        text += "üîí **–ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù–û**"
    else:
        text += "‚úÖ **–î–û–°–¢–£–ü–ù–û**"
        keyboard.append([InlineKeyboardButton("üìû –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_{plant_id}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_catalog")])
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if update.effective_user and is_admin(update.effective_user.id):
        keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{plant_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    except:
        try:
            await query.message.delete()
        except:
            pass
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

async def handle_booking_button(update: Update, context: ContextTypes.DEFAULT_TYPE, plant_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    plants = load_plants()
    
    if plant_id not in plants:
        await query.edit_message_text("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    plant_name = plants[plant_id]['name']
    bot_username = context.bot.username
    
    # –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ª–∏—á–∫—É
    bot_link = f"https://t.me/{bot_username}?start=book_{plant_id}"
    
    keyboard = [
        [InlineKeyboardButton("üìû –ü–µ—Ä–µ–π—Ç–∏ –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é", url=bot_link)],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"plant_{plant_id}")]
    ]
    
    text = f"üìû **–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {plant_name}**\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ª–∏—á–∫—É —Å –±–æ—Ç–æ–º:"
    
    try:
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
    except:
        try:
            await query.message.delete()
        except:
            pass
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE, plant_id: str):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ª–∏—á–∫–µ"""
    plants = load_plants()
    bookings = load_bookings()
    
    if plant_id not in plants:
        await update.message.reply_text("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    if plant_id in bookings:
        await update.message.reply_text("üòî –≠—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ!")
        return
    
    plant_name = plants[plant_id]['name']
    user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {"action": "booking", "plant_id": plant_id, "step": "name"}
    
    await update.message.reply_text(
        f"üìû **–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {plant_name}**\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_admin_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    user_states[user_id] = {"action": "add_plant", "step": "name"}
    
    try:
        await query.edit_message_text("‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", parse_mode=ParseMode.MARKDOWN)
    except:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            parse_mode=ParseMode.MARKDOWN
        )

async def handle_admin_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—Ä–æ–Ω–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    bookings = load_bookings()
    
    if not bookings:
        text = "üìã **–ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π –Ω–µ—Ç**"
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_catalog")]]
    else:
        text = "üìã **–ê–ö–¢–ò–í–ù–´–ï –ë–†–û–ù–ò:**\n\n"
        keyboard = []
        
        for plant_id, booking in bookings.items():
            text += f"ü™¥ **{booking['plant_name']}**\n"
            text += f"üë§ {booking['user_name']}\n"
            text += f"üì± {booking['user_phone']}\n\n"
            
            keyboard.append([
                InlineKeyboardButton(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {booking['plant_name'][:15]}...", callback_data=f"confirm_{plant_id}"),
                InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{plant_id}")
            ])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_catalog")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    except:
        try:
            await query.message.delete()
        except:
            pass
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π)"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if user_id not in user_states:
        return
    
    state = user_states[user_id]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
    if state["action"] == "add_plant":
        if state["step"] == "name":
            state["name"] = text
            state["step"] = "price"
            await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")
            
        elif state["step"] == "price":
            state["price"] = text
            state["step"] = "description"
            await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
            
        elif state["step"] == "description":
            state["description"] = text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ
            plants = load_plants()
            plant_id = f"plant_{len(plants) + 1}_{int(datetime.now().timestamp())}"
            
            plants[plant_id] = {
                "name": state["name"],
                "price": state["price"],
                "description": state["description"],
                "created_at": datetime.now().isoformat()
            }
            
            save_plants(plants)
            del user_states[user_id]
            
            await update.message.reply_text(
                f"‚úÖ **–†–∞—Å—Ç–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!**\n\nü™¥ {state['name']}\nüí∞ {state['price']}",
                parse_mode=ParseMode.MARKDOWN
            )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    elif state["action"] == "booking":
        if state["step"] == "name":
            state["user_name"] = text
            state["step"] = "phone"
            await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:")
            
        elif state["step"] == "phone":
            state["user_phone"] = text
            state["step"] = "comment"
            await update.message.reply_text("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
            
        elif state["step"] == "comment":
            comment = text if text.lower() != "–Ω–µ—Ç" else ""
            plant_id = state["plant_id"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω—å
            plants = load_plants()
            bookings = load_bookings()
            
            if plant_id in bookings:
                await update.message.reply_text("üòî –†–∞—Å—Ç–µ–Ω–∏–µ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ!")
                del user_states[user_id]
                return
            
            bookings[plant_id] = {
                "plant_name": plants[plant_id]["name"],
                "plant_price": plants[plant_id]["price"],
                "user_id": user_id,
                "user_name": state["user_name"],
                "user_phone": state["user_phone"],
                "comment": comment,
                "created_at": datetime.now().isoformat()
            }
            
            save_bookings(bookings)
            del user_states[user_id]
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await update.message.reply_text(
                f"‚úÖ **–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\nü™¥ {plants[plant_id]['name']}\nüë§ {state['user_name']}\nüì± {state['user_phone']}\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            admin_text = f"üîî **–ù–û–í–ê–Ø –ë–†–û–ù–¨**\n\nü™¥ {plants[plant_id]['name']}\nüë§ {state['user_name']}\nüì± {state['user_phone']}\nüí¨ {comment or '–Ω–µ—Ç'}"
            
            for admin_id in ADMIN_IDS:
                if admin_id > 0:
                    try:
                        await context.bot.send_message(admin_id, admin_text, parse_mode=ParseMode.MARKDOWN)
                    except:
                        pass

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    data = query.data
    
    if data == "back_catalog":
        await show_catalog(update, context)
    
    elif data.startswith("plant_"):
        plant_id = data.replace("plant_", "")
        await show_plant(update, context, plant_id)
    
    elif data.startswith("book_"):
        plant_id = data.replace("book_", "")
        await handle_booking_button(update, context, plant_id)
    
    elif data == "admin_add":
        await handle_admin_add(update, context)
    
    elif data == "admin_bookings":
        await handle_admin_bookings(update, context)
    
    elif data.startswith("confirm_"):
        plant_id = data.replace("confirm_", "")
        await confirm_booking(update, context, plant_id)
    
    elif data.startswith("reject_"):
        plant_id = data.replace("reject_", "")
        await reject_booking(update, context, plant_id)
    
    elif data.startswith("delete_"):
        plant_id = data.replace("delete_", "")
        await delete_plant(update, context, plant_id)

async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE, plant_id: str):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –±—Ä–æ–Ω—å"""
    if not is_admin(update.effective_user.id):
        return
    
    bookings = load_bookings()
    if plant_id not in bookings:
        await update.callback_query.edit_message_text("‚ùå –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    booking = bookings[plant_id]
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await context.bot.send_message(
            booking["user_id"],
            f"‚úÖ **–ë–†–û–ù–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!**\n\nü™¥ {booking['plant_name']}\n\n–û–∂–∏–¥–∞–µ–º –≤–∞—Å –≤ –º–∞–≥–∞–∑–∏–Ω–µ!",
            parse_mode=ParseMode.MARKDOWN
        )
    except:
        pass
    
    await update.callback_query.edit_message_text(
        f"‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\nü™¥ {booking['plant_name']}\nüë§ {booking['user_name']}\n\n–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω."
    )

async def reject_booking(update: Update, context: ContextTypes.DEFAULT_TYPE, plant_id: str):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –±—Ä–æ–Ω—å"""
    if not is_admin(update.effective_user.id):
        return
    
    bookings = load_bookings()
    if plant_id not in bookings:
        await update.callback_query.edit_message_text("‚ùå –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    booking = bookings[plant_id]
    del bookings[plant_id]
    save_bookings(bookings)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await context.bot.send_message(
            booking["user_id"],
            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –±—Ä–æ–Ω—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\nü™¥ {booking['plant_name']}\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.",
            parse_mode=ParseMode.MARKDOWN
        )
    except:
        pass
    
    await update.callback_query.edit_message_text(
        f"‚ùå –ë—Ä–æ–Ω—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\nü™¥ {booking['plant_name']}\nüë§ {booking['user_name']}\n\n–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω."
    )

async def delete_plant(update: Update, context: ContextTypes.DEFAULT_TYPE, plant_id: str):
    """–£–¥–∞–ª—è–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–µ"""
    if not is_admin(update.effective_user.id):
        return
    
    plants = load_plants()
    bookings = load_bookings()
    
    if plant_id not in plants:
        await update.callback_query.edit_message_text("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    if plant_id in bookings:
        await update.callback_query.edit_message_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å - –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—å!")
        return
    
    plant_name = plants[plant_id]["name"]
    del plants[plant_id]
    save_plants(plants)
    
    await update.callback_query.edit_message_text(f"‚úÖ –†–∞—Å—Ç–µ–Ω–∏–µ '{plant_name}' —É–¥–∞–ª–µ–Ω–æ")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("catalog", show_catalog))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    logger.info("ü§ñ –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()

import os
import json
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(','))) if os.getenv('ADMIN_IDS') else []

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
WAITING_PLANT_NAME = 'waiting_plant_name'
WAITING_PLANT_DESCRIPTION = 'waiting_plant_description'
WAITING_PLANT_PRICE = 'waiting_plant_price'
WAITING_PLANT_QUANTITY = 'waiting_plant_quantity'
WAITING_PLANT_PHOTO = 'waiting_plant_photo'
WAITING_BOOKING_NAME = 'waiting_booking_name'
WAITING_BOOKING_PHONE = 'waiting_booking_phone'

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
temp_plant_data = {}
temp_booking_data = {}

def load_json_file(filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as file:
                return json.load(file)
        return {}
    except (json.JSONDecodeError, FileNotFoundError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return {}

def save_json_file(filename, data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        with open(filename, 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        return False

def load_plants():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    return load_json_file('plants.json')

def save_plants(plants):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    return save_json_file('plants.json', plants)

def load_bookings():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    return load_json_file('bookings.json')

def save_bookings(bookings):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    return save_json_file('bookings.json', bookings)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        del user_states[user_id]
    if user_id in temp_plant_data:
        del temp_plant_data[user_id]
    if user_id in temp_booking_data:
        del temp_booking_data[user_id]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if user_id in ADMIN_IDS:
        keyboard = [
            [KeyboardButton("üì± –ö–∞—Ç–∞–ª–æ–≥ —Ä–∞—Å—Ç–µ–Ω–∏–π")],
            [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ")],
            [KeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")]
        ]
    else:
        keyboard = [
            [KeyboardButton("üì± –ö–∞—Ç–∞–ª–æ–≥ —Ä–∞—Å—Ç–µ–Ω–∏–π")]
        ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    welcome_msg = "üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ü–≤–µ—Ç–æ–≤ Polly's Garden!\n\n"
    if user_id in ADMIN_IDS:
        welcome_msg += "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
    else:
        welcome_msg += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    
    await update.message.reply_text(welcome_msg, reply_markup=reply_markup)

async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    plants = load_plants()
    
    if not plants:
        await update.message.reply_text("üå± –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –†–∞—Å—Ç–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏
    keyboard = []
    for plant_id, plant_data in plants.items():
        availability = "‚úÖ" if plant_data.get('quantity', 0) > 0 else "‚ùå"
        button_text = f"{availability} {plant_data['name']} - {plant_data['price']}‚ÇΩ"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"plant_{plant_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üå∏ –ö–∞—Ç–∞–ª–æ–≥ –Ω–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π:\n\n"
        "‚úÖ - –í –Ω–∞–ª–∏—á–∏–∏\n"
        "‚ùå - –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=reply_markup
    )

async def handle_plant_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    query = update.callback_query
    await query.answer()
    
    plant_id = query.data.split('_')[1]
    plants = load_plants()
    
    if plant_id not in plants:
        await query.edit_message_text("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    plant = plants[plant_id]
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏
    message_text = f"üå∏ **{plant['name']}**\n\n"
    message_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {plant['description']}\n"
    message_text += f"üí∞ –¶–µ–Ω–∞: {plant['price']}‚ÇΩ\n"
    message_text += f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {plant['quantity']} —à—Ç.\n"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    keyboard = []
    if plant['quantity'] > 0:
        keyboard.append([InlineKeyboardButton("üõí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_{plant_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back_to_catalog")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'photo_file_id' in plant:
        try:
            await query.edit_message_media(
                media=query.message.photo[0].file_id if query.message.photo else None
            )
            await query.message.reply_photo(
                photo=plant['photo_file_id'],
                caption=message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except:
            await query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    else:
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    plant_id = query.data.split('_')[1]
    plants = load_plants()
    
    if plant_id not in plants:
        await query.edit_message_text("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    plant = plants[plant_id]
    
    if plant['quantity'] <= 0:
        await query.edit_message_text("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    temp_booking_data[user_id] = {
        'plant_id': plant_id,
        'plant_name': plant['name'],
        'price': plant['price']
    }
    
    user_states[user_id] = WAITING_BOOKING_NAME
    
    await query.edit_message_text(
        f"üõí –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {plant['name']}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {plant['price']}‚ÇΩ\n\n"
        "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )

async def handle_booking_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id] != WAITING_BOOKING_NAME:
        return
    
    name = update.message.text.strip()
    if len(name) < 2:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):")
        return
    
    temp_booking_data[user_id]['customer_name'] = name
    user_states[user_id] = WAITING_BOOKING_PHONE
    
    await update.message.reply_text(
        "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
    )

async def handle_booking_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id] != WAITING_BOOKING_PHONE:
        return
    
    phone = update.message.text.strip()
    if len(phone) < 10:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    booking_data = temp_booking_data[user_id]
    booking_data['customer_phone'] = phone
    booking_data['user_id'] = user_id
    booking_data['username'] = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    booking_data['booking_time'] = datetime.now().isoformat()
    booking_data['status'] = 'pending'
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    bookings = load_bookings()
    booking_id = str(len(bookings) + 1)
    bookings[booking_id] = booking_data
    
    if save_bookings(bookings):
        # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è
        plants = load_plants()
        plant_id = booking_data['plant_id']
        if plant_id in plants:
            plants[plant_id]['quantity'] -= 1
            save_plants(plants)
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        del user_states[user_id]
        del temp_booking_data[user_id]
        
        await update.message.reply_text(
            f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            f"üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {booking_id}\n"
            f"üå∏ –†–∞—Å—Ç–µ–Ω–∏–µ: {booking_data['plant_name']}\n"
            f"üí∞ –¶–µ–Ω–∞: {booking_data['price']}‚ÇΩ\n\n"
            f"üìû –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø–æ –Ω–æ–º–µ—Ä—É: {phone}\n\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –∑–∞–∫–∞–∑ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üîî –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n"
                         f"üÜî –ó–∞–∫–∞–∑ #{booking_id}\n"
                         f"üë§ –ö–ª–∏–µ–Ω—Ç: {booking_data['customer_name']}\n"
                         f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {booking_data['customer_phone']}\n"
                         f"üå∏ –†–∞—Å—Ç–µ–Ω–∏–µ: {booking_data['plant_name']}\n"
                         f"üí∞ –¶–µ–Ω–∞: {booking_data['price']}‚ÇΩ"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def back_to_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–∞–ª–æ–≥—É"""
    query = update.callback_query
    await query.answer()
    
    plants = load_plants()
    
    if not plants:
        await query.edit_message_text("üå± –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –†–∞—Å—Ç–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    
    keyboard = []
    for plant_id, plant_data in plants.items():
        availability = "‚úÖ" if plant_data.get('quantity', 0) > 0 else "‚ùå"
        button_text = f"{availability} {plant_data['name']} - {plant_data['price']}‚ÇΩ"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"plant_{plant_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üå∏ –ö–∞—Ç–∞–ª–æ–≥ –Ω–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π:\n\n"
        "‚úÖ - –í –Ω–∞–ª–∏—á–∏–∏\n"
        "‚ùå - –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=reply_markup
    )

async def add_plant_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    user_states[user_id] = WAITING_PLANT_NAME
    temp_plant_data[user_id] = {}
    
    await update.message.reply_text("üå± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:")

async def handle_plant_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id] != WAITING_PLANT_NAME:
        return
    
    name = update.message.text.strip()
    if len(name) < 2:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    temp_plant_data[user_id]['name'] = name
    user_states[user_id] = WAITING_PLANT_DESCRIPTION
    
    await update.message.reply_text("üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:")

async def handle_plant_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id] != WAITING_PLANT_DESCRIPTION:
        return
    
    description = update.message.text.strip()
    if len(description) < 10:
        await update.message.reply_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    temp_plant_data[user_id]['description'] = description
    user_states[user_id] = WAITING_PLANT_PRICE
    
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ä–∞—Å—Ç–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤):")

async def handle_plant_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id] != WAITING_PLANT_PRICE:
        return
    
    try:
        price = float(update.message.text.strip())
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.50):")
        return
    
    temp_plant_data[user_id]['price'] = price
    user_states[user_id] = WAITING_PLANT_QUANTITY
    
    await update.message.reply_text("üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ –Ω–∞–ª–∏—á–∏–∏:")

async def handle_plant_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id] != WAITING_PLANT_QUANTITY:
        return
    
    try:
        quantity = int(update.message.text.strip())
        if quantity < 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        return
    
    temp_plant_data[user_id]['quantity'] = quantity
    user_states[user_id] = WAITING_PLANT_PHOTO
    
    await update.message.reply_text("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ:")

async def handle_plant_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id] != WAITING_PLANT_PHOTO:
        return
    
    plant_data = temp_plant_data[user_id]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    if update.message.photo:
        plant_data['photo_file_id'] = update.message.photo[-1].file_id
    elif update.message.text and update.message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        pass  # –§–æ—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
    plants = load_plants()
    plant_id = str(len(plants) + 1)
    plants[plant_id] = plant_data
    
    if save_plants(plants):
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        del user_states[user_id]
        del temp_plant_data[user_id]
        
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Ç–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"üå∏ –ù–∞–∑–≤–∞–Ω–∏–µ: {plant_data['name']}\n"
            f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {plant_data['description']}\n"
            f"üí∞ –¶–µ–Ω–∞: {plant_data['price']}‚ÇΩ\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {plant_data['quantity']} —à—Ç."
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def manage_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    bookings = load_bookings()
    
    if not bookings:
        await update.message.reply_text("üìã –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    pending_orders = []
    confirmed_orders = []
    rejected_orders = []
    
    for booking_id, booking_data in bookings.items():
        status = booking_data.get('status', 'pending')
        order_info = f"#{booking_id} - {booking_data['plant_name']} ({booking_data['customer_name']})"
        
        if status == 'pending':
            pending_orders.append(order_info)
        elif status == 'confirmed':
            confirmed_orders.append(order_info)
        elif status == 'rejected':
            rejected_orders.append(order_info)
    
    message = "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏**\n\n"
    
    if pending_orders:
        message += "‚è≥ **–û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:**\n"
        for order in pending_orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –∑–∞–∫–∞–∑–æ–≤
            message += f"‚Ä¢ {order}\n"
        message += "\n"
    
    if confirmed_orders:
        message += "‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ:**\n"
        for order in confirmed_orders[:5]:
            message += f"‚Ä¢ {order}\n"
        message += "\n"
    
    if rejected_orders:
        message += "‚ùå **–û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ:**\n"
        for order in rejected_orders[:5]:
            message += f"‚Ä¢ {order}\n"
        message += "\n"
    
    message += "–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/order_details <–Ω–æ–º–µ—Ä_–∑–∞–∫–∞–∑–∞>`"
    
    await update.message.reply_text(message, parse_mode='Markdown')

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if user_id in user_states:
        state = user_states[user_id]
        
        if state == WAITING_PLANT_NAME:
            await handle_plant_name(update, context)
            return
        elif state == WAITING_PLANT_DESCRIPTION:
            await handle_plant_description(update, context)
            return
        elif state == WAITING_PLANT_PRICE:
            await handle_plant_price(update, context)
            return
        elif state == WAITING_PLANT_QUANTITY:
            await handle_plant_quantity(update, context)
            return
        elif state == WAITING_PLANT_PHOTO:
            await handle_plant_photo(update, context)
            return
        elif state == WAITING_BOOKING_NAME:
            await handle_booking_name(update, context)
            return
        elif state == WAITING_BOOKING_PHONE:
            await handle_booking_phone(update, context)
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    if text == "üì± –ö–∞—Ç–∞–ª–æ–≥ —Ä–∞—Å—Ç–µ–Ω–∏–π":
        await show_catalog(update, context)
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ":
        await add_plant_start(update, context)
    elif text == "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏":
        await manage_orders(update, context)
    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ":
        if user_id in ADMIN_IDS:
            await update.message.reply_text("üîß –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
    else:
        await update.message.reply_text(
            "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –ø–æ–º–æ—â—å"
        )

async def handle_photo_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    if user_id in user_states and user_states[user_id] == WAITING_PLANT_PHOTO:
        await handle_plant_photo(update, context)
    else:
        await update.message.reply_text("üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —Å–µ–π—á–∞—Å –æ–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ.")

async def handle_callback_queries(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    data = query.data
    
    if data.startswith("plant_"):
        await handle_plant_selection(update, context)
    elif data.startswith("book_"):
        await start_booking(update, context)
    elif data == "back_to_catalog":
        await back_to_catalog(update, context)
    else:
        await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
üå∏ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É Polly's Garden**

**–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `üì± –ö–∞—Ç–∞–ª–æ–≥ —Ä–∞—Å—Ç–µ–Ω–∏–π` - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

**–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**
‚Ä¢ `‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ` - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
‚Ä¢ `üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏` - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ `/order_details <–Ω–æ–º–µ—Ä>` - –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –∑–∞–∫–∞–∑–µ

**–ü—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:**
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
2. –ù–∞–∂–º–∏—Ç–µ "üõí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"
3. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è
4. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
5. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

‚ùì **–í–æ–ø—Ä–æ—Å—ã?** –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not ADMIN_IDS:
        logger.warning("ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(handle_callback_queries))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo_messages))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

import logging
import json
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from telegram.constants import ParseMode, ChatType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
BOT_TOKEN = os.getenv("BOT_TOKEN")

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–ø–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —É @userinfobot)
ADMIN_IDS = [
    int(os.getenv("ADMIN_ID1", "0")), 
    int(os.getenv("ADMIN_ID2", "0"))
]

# ID –∫–∞–Ω–∞–ª–∞ (–ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞)
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "0"))  # –î–æ–±–∞–≤–∏–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

# ========== –§–ê–ô–õ–´ –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• ==========
PLANTS_FILE = "plants.json"
BOOKINGS_FILE = "bookings.json"

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –î–ò–ê–õ–û–ì–û–í ==========
ADDING_NAME, ADDING_DESCRIPTION, ADDING_PRICE, ADDING_PHOTO = range(4)
BOOKING_NAME, BOOKING_PHONE, BOOKING_COMMENT = range(3)

# ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ==========

def load_plants():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(PLANTS_FILE):
        with open(PLANTS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_plants(plants):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ —Ñ–∞–π–ª"""
    with open(PLANTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(plants, f, ensure_ascii=False, indent=2)

def load_bookings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(BOOKINGS_FILE):
        with open(BOOKINGS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_bookings(bookings):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–µ–π –≤ —Ñ–∞–π–ª"""
    with open(BOOKINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(bookings, f, ensure_ascii=False, indent=2)

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    chat_type = update.effective_chat.type
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id} (—Ç–∏–ø: {chat_type})")
    
    # –õ–æ–≥–∏—Ä—É–µ–º ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if chat_type == ChatType.CHANNEL:
        logger.info(f"üî• ID –ö–ê–ù–ê–õ–ê: {chat_id} - –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é CHANNEL_ID")
    
    # –í –∫–∞–Ω–∞–ª–µ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
    if chat_type == ChatType.CHANNEL:
        await show_catalog_message(update, context)
    else:
        # –í –ª–∏—á–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await show_private_menu(update, context)

async def show_private_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    user = update.effective_user
    
    welcome_text = f"üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω, {user.first_name}!"
    
    if is_admin(user.id):
        welcome_text += "\n\nüîß –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –î–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏."
    
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –∫–∞–∫ –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await show_catalog_message(update, context, welcome_text)

async def show_catalog_message(update: Update, context: ContextTypes.DEFAULT_TYPE, prefix_text=""):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    plants = load_plants()
    
    message_text = prefix_text + "\n\nüå± **–ö–ê–¢–ê–õ–û–ì –†–ê–°–¢–ï–ù–ò–ô**\n\n" if prefix_text else "üå± **–ö–ê–¢–ê–õ–û–ì –†–ê–°–¢–ï–ù–ò–ô**\n\n"
    
    if not plants:
        message_text += "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —Ä–∞—Å—Ç–µ–Ω–∏–π –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(message_text, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(message_text, parse_mode=ParseMode.MARKDOWN)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
    keyboard = []
    available_count = 0
    
    for plant_id, plant_info in plants.items():
        if plant_info.get('available', True):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –ª–∏
            bookings = load_bookings()
            is_booked = plant_id in bookings and bookings[plant_id]['status'] == 'active'
            
            if not is_booked:
                keyboard.append([InlineKeyboardButton(
                    f"ü™¥ {plant_info['name']} - {plant_info['price']}", 
                    callback_data=f"show_plant_{plant_id}"
                )])
                available_count += 1
    
    if available_count == 0:
        message_text += "üîí –í—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å–µ–π—á–∞—Å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã.\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
        keyboard = []
    else:
        message_text += f"–î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å—Ç–µ–Ω–∏–π: **{available_count}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω
    if update.effective_user and is_admin(update.effective_user.id):
        if keyboard:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="admin_add_plant")])
            keyboard.append([InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏", callback_data="admin_bookings")])
        else:
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="admin_add_plant")],
                [InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏", callback_data="admin_bookings")]
            ]
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message_text, 
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            message_text, 
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

async def show_plant_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    plant_id = query.data.replace("show_plant_", "")
    plants = load_plants()
    
    if plant_id not in plants:
        await query.edit_message_text("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    plant = plants[plant_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ
    bookings = load_bookings()
    is_booked = plant_id in bookings and bookings[plant_id]['status'] == 'active'
    
    message = f"ü™¥ **{plant['name']}**\n\n"
    message += f"üí∞ –¶–µ–Ω–∞: **{plant['price']}**\n\n"
    message += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{plant['description']}\n\n"
    
    keyboard = []
    
    if is_booked:
        message += "üîí **–ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù–û**"
    else:
        message += "‚úÖ **–î–û–°–¢–£–ü–ù–û –î–õ–Ø –ë–†–û–ù–ò**"
        keyboard.append([InlineKeyboardButton("üìû –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_plant_{plant_id}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back_to_catalog")])
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if is_admin(update.effective_user.id):
        keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data=f"admin_delete_{plant_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
    if plant.get('photo_file_id'):
        try:
            await query.edit_message_media(
                media=InputMediaPhoto(
                    media=plant['photo_file_id'],
                    caption=message,
                    parse_mode=ParseMode.MARKDOWN
                ),
                reply_markup=reply_markup
            )
        except:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
    else:
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

# ========== –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï ==========

async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –ª–∏—á–∫—É"""
    query = update.callback_query
    await query.answer()
    
    plant_id = query.data.replace("book_plant_", "")
    plants = load_plants()
    
    if plant_id not in plants:
        await query.edit_message_text("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    plant_name = plants[plant_id]['name']
    bot_username = context.bot.username
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    bot_link = f"https://t.me/{bot_username}?start=book_{plant_id}"
    
    keyboard = [
        [InlineKeyboardButton("üìû –ü–µ—Ä–µ–π—Ç–∏ –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é", url=bot_link)],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back_to_catalog")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìû **–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {plant_name}**\n\n"
        f"–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n"
        f"–í—ã –ø–µ—Ä–µ–π–¥–µ—Ç–µ –≤ –ª–∏—á–Ω—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –±–æ—Ç–æ–º –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_start_parameter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã /start"""
    if not context.args:
        return await show_private_menu(update, context)
    
    param = context.args[0]
    
    if param.startswith("book_"):
        plant_id = param.replace("book_", "")
        plants = load_plants()
        
        if plant_id not in plants:
            await update.message.reply_text("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ
        bookings = load_bookings()
        if plant_id in bookings and bookings[plant_id]['status'] == 'active':
            await update.message.reply_text(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ!\n\n"
                "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ."
            )
            return await show_catalog_message(update, context)
        
        context.user_data['booking_plant_id'] = plant_id
        plant_name = plants[plant_id]['name']
        
        await update.message.reply_text(
            f"üìû **–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è: {plant_name}**\n\n"
            f"–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–º –Ω—É–∂–Ω—ã –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            parse_mode=ParseMode.MARKDOWN
        )
        return BOOKING_NAME
    
    # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
    return await show_private_menu(update, context)

# ========== –ü–†–û–¶–ï–°–° –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø –í –õ–ò–ß–ö–ï ==========

async def booking_get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    context.user_data['booking_name'] = update.message.text.strip()
    
    await update.message.reply_text(
        "üì± –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )
    return BOOKING_PHONE

async def booking_get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    context.user_data['booking_phone'] = update.message.text.strip()
    
    await update.message.reply_text(
        "üí¨ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç):"
    )
    return BOOKING_COMMENT

async def booking_get_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    comment = update.message.text.strip() if update.message.text.strip().lower() != '–Ω–µ—Ç' else ""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    plant_id = context.user_data.get('booking_plant_id')
    name = context.user_data.get('booking_name')
    phone = context.user_data.get('booking_phone')
    
    if not plant_id or not name or not phone:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        context.user_data.clear()
        return ConversationHandler.END
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    plants = load_plants()
    bookings = load_bookings()
    
    if plant_id not in plants:
        await update.message.reply_text("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        context.user_data.clear()
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ
    if plant_id in bookings and bookings[plant_id]['status'] == 'active':
        await update.message.reply_text(
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ!\n\n"
            "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è."
        )
        context.user_data.clear()
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω—å
    booking_data = {
        'plant_id': plant_id,
        'plant_name': plants[plant_id]['name'],
        'plant_price': plants[plant_id]['price'],
        'user_id': update.effective_user.id,
        'user_name': name,
        'user_phone': phone,
        'comment': comment,
        'status': 'pending',
        'created_at': datetime.now().isoformat(),
        'expires_at': (datetime.now() + timedelta(hours=24)).isoformat()
    }
    
    bookings[plant_id] = booking_data
    save_bookings(bookings)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.reply_text(
        f"‚úÖ **–ó–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n"
        f"ü™¥ –†–∞—Å—Ç–µ–Ω–∏–µ: **{plants[plant_id]['name']}**\n"
        f"üí∞ –¶–µ–Ω–∞: **{plants[plant_id]['price']}**\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '–Ω–µ—Ç'}\n\n"
        f"‚è∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    admin_message = (
        f"üîî **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï**\n\n"
        f"ü™¥ –†–∞—Å—Ç–µ–Ω–∏–µ: **{plants[plant_id]['name']}**\n"
        f"üí∞ –¶–µ–Ω–∞: {plants[plant_id]['price']}\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {name}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '–Ω–µ—Ç'}\n"
        f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.id}\n\n"
        f"‚è∞ –ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {(datetime.now() + timedelta(hours=24)).strftime('%d.%m.%Y %H:%M')}"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_booking_{plant_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_booking_{plant_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    for admin_id in ADMIN_IDS:
        if admin_id > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID –≤–∞–ª–∏–¥–Ω—ã–π
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=admin_message,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    return ConversationHandler.END

# ========== –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ==========

async def admin_add_plant_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(update.effective_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    await query.edit_message_text(
        "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:",
        parse_mode=ParseMode.MARKDOWN
    )
    return ADDING_NAME

async def admin_show_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(update.effective_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    bookings = load_bookings()
    active_bookings = {k: v for k, v in bookings.items() 
                      if v['status'] in ['pending', 'active']}
    
    if not active_bookings:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back_to_catalog")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìã **–ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π –Ω–µ—Ç**",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    message = "üìã **–ê–ö–¢–ò–í–ù–´–ï –ë–†–û–ù–ò:**\n\n"
    keyboard = []
    
    for plant_id, booking in active_bookings.items():
        status_emoji = "‚è≥" if booking['status'] == 'pending' else "‚úÖ"
        status_text = "–û–∂–∏–¥–∞–µ—Ç" if booking['status'] == 'pending' else "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
        
        message += f"{status_emoji} **{booking['plant_name']}** - {booking['plant_price']}\n"
        message += f"üë§ {booking['user_name']} | üì± {booking['user_phone']}\n"
        message += f"üìÖ {datetime.fromisoformat(booking['created_at']).strftime('%d.%m %H:%M')}"
        message += f" | üìä {status_text}\n\n"
        
        if booking['status'] == 'pending':
            keyboard.extend([
                [
                    InlineKeyboardButton(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {booking['plant_name'][:20]}...", 
                                       callback_data=f"confirm_booking_{plant_id}"),
                ],
                [
                    InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {booking['plant_name'][:20]}...", 
                                       callback_data=f"reject_booking_{plant_id}")
                ]
            ])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back_to_catalog")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

# ========== –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ê–°–¢–ï–ù–ò–ô ==========

async def add_plant_get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return ConversationHandler.END
    
    context.user_data['plant_name'] = update.message.text.strip()
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ä–∞—Å—Ç–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500‚ÇΩ):")
    return ADDING_PRICE

async def add_plant_get_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    context.user_data['plant_price'] = update.message.text.strip()
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è (—Ä–∞–∑–º–µ—Ä, —É—Ö–æ–¥, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏):")
    return ADDING_DESCRIPTION

async def add_plant_get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    context.user_data['plant_description'] = update.message.text.strip()
    await update.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
    return ADDING_PHOTO

async def add_plant_get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–µ"""
    plants = load_plants()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è
    plant_id = f"plant_{len(plants) + 1}_{int(datetime.now().timestamp())}"
    
    plant_data = {
        'name': context.user_data['plant_name'],
        'price': context.user_data['plant_price'],
        'description': context.user_data['plant_description'],
        'available': True,
        'created_at': datetime.now().isoformat()
    }
    
    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id
    if update.message.photo:
        plant_data['photo_file_id'] = update.message.photo[-1].file_id
    elif update.message.text and update.message.text.strip().lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return ADDING_PHOTO
    
    plants[plant_id] = plant_data
    save_plants(plants)
    
    await update.message.reply_text(
        f"‚úÖ **–†–∞—Å—Ç–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!**\n\n"
        f"ü™¥ –ù–∞–∑–≤–∞–Ω–∏–µ: **{plant_data['name']}**\n"
        f"üí∞ –¶–µ–Ω–∞: **{plant_data['price']}**\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {plant_data['description'][:100]}...\n\n"
        f"–†–∞—Å—Ç–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∫–∞–Ω–∞–ª–∞.",
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–∞–Ω–∞–ª –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
    if CHANNEL_ID != 0:
        try:
            await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=f"üÜï **–ù–æ–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!**\n\n"
                     f"ü™¥ **{plant_data['name']}** - {plant_data['price']}\n\n"
                     f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog",
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: {e}")
    
    context.user_data.clear()
    return ConversationHandler.END

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø/–û–¢–ö–õ–û–ù–ï–ù–ò–Ø –ë–†–û–ù–ï–ô ==========

async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    if not is_admin(update.effective_user.id):
        await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    query = update.callback_query
    await query.answer()
    plant_id = query.data.replace("confirm_booking_", "")
    
    bookings = load_bookings()
    if plant_id not in bookings:
        await query.edit_message_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    booking = bookings[plant_id]
    booking['status'] = 'active'
    booking['confirmed_by'] = update.effective_user.id
    booking['confirmed_at'] = datetime.now().isoformat()
    save_bookings(bookings)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await context.bot.send_message(
            chat_id=booking['user_id'],
            text=f"‚úÖ **–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û!**\n\n"
                 f"ü™¥ –†–∞—Å—Ç–µ–Ω–∏–µ: **{booking['plant_name']}**\n"
                 f"üí∞ –¶–µ–Ω–∞: **{booking['plant_price']}**\n\n"
                 f"–û–∂–∏–¥–∞–µ–º –≤–∞—Å –≤ –º–∞–≥–∞–∑–∏–Ω–µ!\n"
                 f"üìû –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö –∑–≤–æ–Ω–∏—Ç–µ: [–£–ö–ê–ñ–ò–¢–ï –í–ê–® –¢–ï–õ–ï–§–û–ù]",
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    
    await query.edit_message_text(
        f"‚úÖ **–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!**\n\n"
        f"ü™¥ {booking['plant_name']}\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {booking['user_name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {booking['user_phone']}\n\n"
        f"–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏.",
        parse_mode=ParseMode.MARKDOWN
    )

async def reject_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    if not is_admin(update.effective_user.id):
        await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    query = update.callback_query
    await query.answer()
    plant_id = query.data.replace("reject_booking_", "")
    
    bookings = load_bookings()
    if plant_id not in bookings:
        await query.edit_message_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    booking = bookings[plant_id]
    del bookings[plant_id]
    save_bookings(bookings)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await context.bot.send_message(
            chat_id=booking['user_id'],
            text=f"üòî **–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ**\n\n"
                 f"ü™¥ –†–∞—Å—Ç–µ–Ω–∏–µ: **{booking['plant_name']}**\n\n"
                 f"–í–æ–∑–º–æ–∂–Ω–æ, —Ä–∞—Å—Ç–µ–Ω–∏–µ —É–∂–µ –ø—Ä–æ–¥–∞–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                 f"–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.",
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    
    await query.edit_message_text(
        f"‚ùå **–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ**\n\n"
        f"ü™¥ {booking['plant_name']}\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {booking['user_name']}\n\n"
        f"–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.",
        parse_mode=ParseMode.MARKDOWN
    )

# ========== –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK –ó–ê–ü–†–û–°–û–í ==========

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("show_plant_"):
        await show_plant_details(update, context)
    elif query.data.startswith("book_plant_"):
        await start_booking(update, context)
    elif query.data == "back_to_catalog":
        await show_catalog_message(update, context)
    elif query.data == "admin_add_plant":
        return await admin_add_plant_callback(update, context)
    elif query.data == "admin_bookings":
        await admin_show_bookings(update, context)
    elif query.data.startswith("confirm_booking_"):
        await confirm_booking(update, context)
    elif query.data.startswith("reject_booking_"):
        await reject_booking(update, context)
    elif query.data.startswith("admin_delete_"):
        await admin_delete_plant(update, context)

async def admin_delete_plant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(update.effective_user.id):
        await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    query = update.callback_query
    await query.answer()
    
    plant_id = query.data.replace("admin_delete_", "")
    plants = load_plants()
    
    if plant_id not in plants:
        await query.edit_message_text("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    plant_name = plants[plant_id]['name']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏
    bookings = load_bookings()
    if plant_id in bookings and bookings[plant_id]['status'] == 'active':
        await query.edit_message_text(
            f"‚ùå **–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ**\n\n"
            f"ü™¥ {plant_name}\n\n"
            f"–ù–∞ —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—å!",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏
    del plants[plant_id]
    save_plants(plants)
    
    if plant_id in bookings:
        del bookings[plant_id]
        save_bookings(bookings)
    
    await query.edit_message_text(
        f"‚úÖ **–†–∞—Å—Ç–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ**\n\n"
        f"ü™¥ {plant_name}\n\n"
        f"–†–∞—Å—Ç–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.",
        parse_mode=ParseMode.MARKDOWN
    )

# ========== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ö–ê–ù–ê–õ–ê ==========

async def catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /catalog - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥"""
    await show_catalog_message(update, context)

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ"""
    info_text = (
        "üåø **–ù–∞—à —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω**\n\n"
        "–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö –∏ –≤—Å—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º –¥–ª—è –∏—Ö —É—Ö–æ–¥–∞.\n\n"
        "üïê **–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:** –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 20:00\n"
        "üìç **–ê–¥—Ä–µ—Å:** [–£–ö–ê–ñ–ò–¢–ï –í–ê–® –ê–î–†–ï–°]\n"
        "üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** [–£–ö–ê–ñ–ò–¢–ï –í–ê–® –¢–ï–õ–ï–§–û–ù]\n"
        "üìß **Email:** [–£–ö–ê–ñ–ò–¢–ï –í–ê–® EMAIL]\n\n"
        f"ü§ñ –î–ª—è –∑–∞–∫–∞–∑–æ–≤ –ø–∏—à–∏—Ç–µ –±–æ—Ç—É: @{context.bot.username}"
    )
    
    await update.message.reply_text(info_text, parse_mode=ParseMode.MARKDOWN)

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ==========

async def handle_channel_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ"""
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–Ω–∞–ª–∞
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_type} {chat_id}: {update.message.text}")
    
    # –í –∫–∞–Ω–∞–ª–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    if chat_type == ChatType.CHANNEL and update.message.text:
        if update.message.text.startswith('/'):
            # –ö–æ–º–∞–Ω–¥—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ handlers
            return
    
    # –í –≥—Ä—É–ø–ø–∞—Ö –∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –º–æ–∂–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å—ë
    if chat_type in [ChatType.GROUP, ChatType.SUPERGROUP, ChatType.PRIVATE]:
        return

# ========== MAIN –§–£–ù–ö–¶–ò–Ø ==========

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ)
    add_plant_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_add_plant_callback, pattern="^admin_add_plant$")],
        states={
            ADDING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_plant_get_name)],
            ADDING_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_plant_get_price)],
            ADDING_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_plant_get_description)],
            ADDING_PHOTO: [MessageHandler(filters.PHOTO | filters.TEXT & ~filters.COMMAND, add_plant_get_photo)],
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ)
    booking_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", handle_start_parameter, filters.ChatType.PRIVATE)
        ],
        states={
            BOOKING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, booking_get_name)],
            BOOKING_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, booking_get_phone)],
            BOOKING_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, booking_get_comment)],
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start, filters.ChatType.CHANNEL))
    application.add_handler(CommandHandler("start", handle_start_parameter, filters.ChatType.PRIVATE))
    application.add_handler(CommandHandler("catalog", catalog_command))
    application.add_handler(CommandHandler("info", info_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
    application.add_handler(add_plant_handler)
    application.add_handler(booking_handler)
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT, handle_channel_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
